buildscript {
    ext {
        androidVersion = '8.2.0'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
}

repositories {
    google()
    jcenter()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

group = 'io.github.dsvdsv'
version = new Date().format('yyyyMMdd.HHmm')

dependencies {
    implementation "com.android.tools.build:gradle:$androidVersion"
    // Use JUnit test framework for unit tests
    testImplementation('org.codehaus.groovy:groovy-all:3.0.17')
    testImplementation('org.spockframework:spock-core:2.2-M2-groovy-3.0')

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
}

gradlePlugin {
    // Define the plugin
    plugins {
        scalaAndroidPlugin {
            id = 'io.github.dsvdsv.scala-android'
            implementationClass = 'io.github.dsvdsv.scala.android.plugin.ScalaAndroidPlugin'
        }
    }
}

project.configurations.testRuntimeOnly.setCanBeResolved(true)
// Add a source set for the functional test suite
sourceSets {
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeOnly
        runtimeClasspath += output + compileClasspath
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    useJUnitPlatform()

    testLogging.showStandardStreams(true)

    description = "Runs fuctional tests"
    group = "verification"

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'scala-android-plugin'
            groupId group
            version version
            from(components.java)
            pom {
                name = 'Scala android plugin'
                description = 'Scala android plugin'
                url = 'https://github.com/dsvdsv/scala-android-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'dsvdsv'
                        name = 'Sergey Dikanskiy'
                        email = 'dsvdsv@yandex.ru'
                    }
                }
                scm {
                    connection = 'https://github.com/dsvdsv/scala-android-plugin'
                    developerConnection = 'https://github.com/dsvdsv/scala-android-plugin'
                    url = 'https://github.com/dsvdsv/scala-android-plugin'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.property("ossrhUsername")
                password = project.property("ossrhPassword")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if (JavaVersion.current().isJava11Compatible()) {
        options.addBooleanOption('html5', true)
    }
}